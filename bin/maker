#!/usr/bin/env node
const path = require('path')
const pkg = require('../package.json')
const program = require('commander')
const entry = require('../dist/entry')
const cwd = process.cwd()

program.version(pkg.version)

function parseArray(x) {
  return x && x.match(/[^,\s][^,]+[^,\s](?=,?)/g)
}

function resolvePath(pathname) {
  if (pathname == undefined) return
  return path.isAbsolute(pathname) && pathname || path.resolve(cwd, pathname)
}

const opts = program
  .description('make markdown file to html file.')

  .option('-f, --file <file>', 'location of markdown file/folder.', resolvePath)
  .option('-o, --output <output>', 'location of generated files to save. ' +
    'Directory structure will be preserved, while <file> is a folder.', resolvePath)
  .option('-c, --config <config>', 'location of config file(yaml, json/js supported).', resolvePath)

  .option('-T, --title <title>', '[post] html title.')
  .option('-D, --desc <desc>', '[post] html description.')
  .option('-K, --keywords <keyword,keyword,...>', '[post] html keywords.', parseArray)
  .option('-C, --categories <category,category,...>', '[post] categories.', parseArray)
  .option('-T, --tag <tag,tag,...>', '[post] tags.', parseArray)
  .option('-P, --passcode <passcode>', '[post] passcode, if encryption is supposed.')

  .parse(process.argv)
  .opts()

entry({
  cwd: cwd,
  file: opts.file,
  output: opts.output,
  config: opts.config,
  title: opts.title,
  description: opts.desc,
  keywords: opts.keywords,
  tags: opts.tags,
  categories: opts.categories,
  passcode: opts.passcode
}).catch(console.error)